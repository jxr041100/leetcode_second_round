Q:
Reverse a singly linked list.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL ) return NULL;
        //note, 11/14/2015, pay attention initial condition for pre=NULL.
        ListNode *pre = NULL;
        ListNode *curr = head;
        ListNode *next;
        //note, 11/14/2015, LOOK AT THE FOLLOWING LOOP.
        while(curr)
        {
            next = curr->next;
            curr->next = pre;
            pre = curr;
            curr = next;
        }
        return pre;
    }
};


//recursive solution.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        return reverseUtil(head,NULL);
    }
    
    ListNode *reverseUtil(ListNode*curr,ListNode*pre)
    {
        //Note 12/13/2015: return pre not NULL.
        if(curr==NULL) return pre;
        
        ListNode *next = curr->next;
        curr->next = pre;
        return reverseUtil(next,curr);
    }
};
