Q:
 Given a binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path does not need to go through the root.

For example:
Given the below binary tree,

       1
      / \
     2   3

Return 6. 


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    int maxPathSum(TreeNode* root) {
        maxVAL = INT_MIN;  
        dfs(root);  
        return maxVAL;  
    }  
    int dfs(TreeNode* root){  
        if (root==NULL) return 0;  
        int l = dfs(root->left);  
        int r = dfs(root->right);  
        int sum = root->val;  
        if (l>0) sum += l;  
        if (r>0) sum += r;  
        maxVAL = max(maxVAL,sum);  
        return max(r,l)>0?max(r,l)+root->val:root->val;  
    }
    
private:
int maxVAL;
};
