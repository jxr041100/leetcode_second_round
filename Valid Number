Q:
Validate if a given string is numeric.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true


Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. 

Update (2015-02-10):
 The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button î€± to reset your code definition. 




class Solution {
public:
    bool isNumber(string s) {
        int n = s.size();
        if(n==0) return false;
        bool flag = false;
        int i = 0;
        while(i<n && s[i] == ' ') i++;
        if(i<n && (s[i] == '-'||s[i] == '+')) i++;
        while(i<n && isDigits(s[i]))
        {
            flag = true;
            i++;
        }
        if(i<n && s[i] == '.') i++;
        while(i<n && isDigits(s[i]))
        {
            flag = true;
            i++;
        }
        if(i<n && flag && (s[i] == 'e' || s[i]=='E'))
        {
            i++;
            flag = false; //reset it as false.
            if(i<n && (s[i] == '-'||s[i] == '+')) i++;
            while(i<n && isDigits(s[i]))
            {
                flag = true;
                i++;
            }
        }
        while(i<n && s[i] == ' ') i++;
        return i==n && flag;
    }
    bool isDigits(char c)
    {
        return c>='0' && c<='9';
    }
};
