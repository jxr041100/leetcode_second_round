 Given an unsorted integer array, find the first missing positive integer.

For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.

Your algorithm should run in O(n) time and uses constant space. 


class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        if(n==0) return 1;
        
        for(int i = 0;i<n;i++)
        {
            //Notes: nums[i]<n can not be missed. otherwise [3,2] runtime error.
            //Notes: nums[i] and num[nums[i]-1]] exchange.
            while(nums[i]>0 && nums[i]<n && nums[i]!=i+1)
            {
               if(nums[i]==nums[nums[i]-1]) break;
               swap(nums[i],nums[nums[i]-1]);
            }
        }
        for(int i = 0;i<n;i++)
        {
            if(nums[i]!=i+1)
                return i+1;
        }
        //Note: cannot missing n+1;
        return n+1;
    }
};
