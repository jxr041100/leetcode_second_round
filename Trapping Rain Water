/***
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example,
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6. 
**************************************************************/


// two scan pass from left to right, and from right to left.
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        if(n<2) return 0;
        int water = 0;
        
        vector<int>left(n);
        vector<int>right(n);
        int maxLeft=INT_MIN;
        int maxRight=INT_MIN;
        //scan left to right
        for(int i = 0;i<n;i++)
        {
          if(height[i]>maxLeft)
            maxLeft = height[i];
          left[i] = maxLeft;
        }
        
        //scan right to left
        for(int i = n-1;i>=0;i--)
        {
          if(height[i]>maxRight)
            maxRight = height[i];
          right[i] = maxRight;
        }
        
        //compute the water
        for(int i = 0;i<n;i++)
        {
            water+= min(left[i],right[i])-height[i];
        }
        return water;
        
    }
};
