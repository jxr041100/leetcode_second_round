Q:
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.
For "(()", the longest valid parentheses substring is "()", which has length = 2.
Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4. 

class Solution {
public:
    int longestValidParentheses(string s) {
        int n = s.size();
        if(n<2) return 0;
        vector<int>dp(n);
        int max_len = 0;
        for(int j = 1;j<n;j++)
        {
            if(s[j]=='(') continue;
            else if(s[j-1]=='(')
                dp[j]+= dp[j-2]+2;
            else 
            {
                //skip the dp[j-1]
                if(j-dp[j-1]-1>=0 && s[j-dp[j-1]-1]=='(')
                {
                    dp[j]+= dp[j-1] +2;
                    if(j-dp[j-1]-2>=0) //not over boundary, add previous boundary.
                        dp[j]+=dp[j-dp[j-1]-2];
                }
            }
            max_len = max(max_len,dp[j]);
        }
        return max_len;
    }
};
