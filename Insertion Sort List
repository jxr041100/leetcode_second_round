Q:
Sort a linked list using insertion sort.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* insertionSortList(ListNode* head)
    {
        if(head == NULL || head->next == NULL) return head;
        ListNode dummy(INT_MIN);
        ListNode *p = &dummy;
        ListNode *curr = head;
        while(curr)
        {
            p = &dummy;
            while(p->next && p->next->val <=curr->val)
                p = p->next;
            
            ListNode *n = p->next;
            p->next = curr;
            curr = curr->next;
            p->next->next = n;
        }
        return dummy.next;
    }
};


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
  Note: Passed one time.
class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
        vector<int> nums;
        ListNode *curr = head;
        while(curr!=NULL)
        {
            nums.push_back(curr->val);
            curr= curr->next;
        }
        insertionSort(nums,nums.size());
        curr = head;
        int i = 0;
        while(curr!=NULL)
        {
            curr->val = nums[i++];
            curr = curr->next;
        }
        return head;
        
    }
    
    void insertionSort(vector<int>&arr, int length) 
    {      
        int i, j, tmp;
        for (i = 1; i < length; i++) {
            j = i;
            while (j > 0 && arr[j - 1] > arr[j]) {
                  tmp = arr[j];
                  arr[j] = arr[j - 1];
                  arr[j - 1] = tmp;
                  j--;
            }
        }
    }

};
