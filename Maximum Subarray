Q:
 Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6. 

/*
 我们这么想，当我们从头到尾遍历这个数组的时候，对于一个数组里的数字，它有几种选择呢？
它只有两种选择： 1. 加入之前的SubArray， 2. 自己另起一个SubArray
好，那什么时候会出现这两种情况呢。
注意我们是找累加的最大值，那么，
如果之前SubArray的总体和大于0的话，我们可以认为其对后续数字是有贡献的。这种情况下我们选择加入之前的SubArray
如果之前SubArray的总体和为0或者小于0的话，我们可以认为其对后续数字是没有贡献，甚至是有害的（小于0时）。
这种情况下我们只能选择以这个数字开始，另起一个SubArray明白了这点，代码就很好写了, sum记录之前SubArray的和，
max用来返回最大值，当sum的值大于max时，
说明发现和更大的SubArray序列，此时更新max的值。
*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
      int n = nums.size();
      int sum = 0;
      int maxSum = INT_MIN;
      for(int j = 0;j<n;j++)
      {
            sum = sum>0? sum + nums[j]: nums[j];  
            maxSum = max(sum,maxSum); 
      }
      return maxSum==INT_MIN?sum:maxSum;
    }
};
