Q:
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

Subscribe to see which companies asked this question


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode dummy(0);
        ListNode *node = &dummy;//dummy, dummy->next;
        while(l1 || l2 || carry)
        {
            if(l1){carry += l1->val;l1 = l1->next;}
            if(l2){carry += l2->val;l2 = l2->next;}
            node->next = new ListNode(carry%10);
            node = node->next;
            carry = carry/10;
        }
        
        return dummy.next;
        /*
        
        while(l1!=NULL && l2 != NULL)
        {
            int sum = l1->val + l2->val + carry;
            int update_val = sum%10;
            carry = sum/10;
            node->next = new ListNode(update_val);
            node = node->next;
            l1 = l1->next;
            l2 = l2->next;
        }
          while(l1!=NULL)
          {
            int sum = l1->val+carry;
            int update_val = sum%10;
            carry = sum/10;
            node->next = new ListNode(update_val);
            node = node->next;
            l1 = l1->next;
          }
          
          while(l2!=NULL)
          {
            int sum = l2->val+carry;
            int update_val = sum%10;
            carry = sum/10;
            node->next = new ListNode(update_val);
            node = node->next;
            l2 = l2->next;
          }
          
          if(carry==1)
              node->next = new ListNode(1);
          
          return dummy.next;*/
    }
};
