Q:
Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.
Example 1

Input: "2-1-1".
((2-1)-1) = 0
(2-(1-1)) = 2

Output: [0, 2]

Example 2

Input: "2*3-4*5"

(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10

Output: [-34, -14, -10, -10, 10]


class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        vector<int> ans;
        bool pureNum=true;
        int n = input.size();
        for (int i=0; i<n; i++) 
            if (input[i]<'0' || input[i]>'9') {
                pureNum=false;
                char c = input[i];
                vector<int> L=diffWaysToCompute(input.substr(0, i));
                vector<int> R=diffWaysToCompute(input.substr(i+1, n-i-1));
                for (int m = 0;m<L.size();m++)
                    for (int n = 0;n<R.size();n++)
                        if (c=='+') ans.push_back(L[m]+R[n]);
                        else if (c=='-') ans.push_back(L[m]-R[n]);
                        else if (c=='*') ans.push_back(L[m]*R[n]);
            }

        if (pureNum)
            ans.push_back(atoi(input.c_str()));
        return ans;
    }
};
