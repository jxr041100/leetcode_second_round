Q:
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Ensure that numbers within the set are sorted in ascending order.

Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]


Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

Credits:



class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> result;
        vector<int> tmp;
        dfs(k,n,1,tmp,result);
        return result;
    }
    
    void dfs(int k, int target,int start,vector<int> &tmp,vector<vector<int>> &result)
    {
        if(tmp.size()==k )
        {
            int sum = accumulate(tmp.begin(),tmp.end(),0);
            if(sum==target)
            {
                 sort(tmp.begin(),tmp.end());
                 result.push_back(tmp);
            }
            return;
        }
        
        for(int i = start;i<=9;i++)//note: should be i<=9. not i<9
        {
            tmp.push_back(i);
            dfs(k,target,i+1,tmp,result);
            tmp.pop_back();
        }
    }
};
