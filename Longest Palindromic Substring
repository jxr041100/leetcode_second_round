Q:
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000,
and there exists one unique longest palindromic substring

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        string result;
        if(n==0) return result;
        if(n==1) return s;
        //vector<vector<bool>> dp(n,vector<bool>(n)); 
        //notes 11/06/2015: cannot use vector, because of memory issue if n is too large. 
        int dp[n][n];
        memset(dp,0,sizeof(dp));
        
       //start condition I
        for(int i =0;i<n;i++)
            dp[i][i] = true;
      
        //start condition, // check for sub-string of length 2.
        int start = 0;
        int longest_len = 1;
        for(int i =0;i<n-1;i++)
            if(s[i] == s[i+1])
               {
                   dp[i][i+1] = true;
                   start = i;
                   longest_len = 2;
               }
               
           
            //dp algorithm      
            for (int len = 3; len <= n; len++) //take from 3 steps away.
                for (int i = 0; i <=n-len; i++) 
                {
                        // Get the ending index of substring from
                        // starting index i and length k
                        int j = i + len - 1;
                        // checking for sub-string from ith index to
                        // jth index iff str[i+1] to str[j-1] is a
                        // palindrome
                        if(s[i] == s[j] && dp[i+1][j-1])
                        {
                            dp[i][j] = true;
                            if(len>longest_len)
                            {
                                longest_len = len;
                                start = i;
                            }
                        }
                }
            return s.substr(start,longest_len);
    }
};
