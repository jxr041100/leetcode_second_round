Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent. 

Find the maximum coins you can collect by bursting the balloons wisely. 

Note: 
 (1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
 (2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100 

Example: 

Given [3, 1, 5, 8] 

Return 167 
    nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
   coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167



// dp solution
// dp[i][j] = max(dp[i][j], dp[i][x-1] + nums[i-1]*nums[x]*nums[j+1] + dp[x+1][j]; // x from i to j
int maxCoins(vector<int>& nums) {
    int n = nums.size();
    nums.insert(nums.begin(), 1);
    nums.insert(nums.end(), 1);

    vector<vector<int> > dp(n+2, vector<int>(n+2, 0));

    // k indetify the the body length for dp[i, j]
    // travel all the possibility for body length for 1 to n    
    for (int k = 1; k <= n; k++) { 
            // [i, j] body length from 1 to n
            for (int i = 1; i <= n - k + 1; ++i) {
            int j = i + k - 1;
            // x between [i, j]                    
            for (int x = i; x <= j; ++x) {
                int temp = dp[i][x-1] + nums[i-1]*nums[x]*nums[j+1] + dp[x+1][j];
                if (temp > dp[i][j]) dp[i][j] = temp;
            }
        }
    }

    return dp[1][n];
}

// divide and conquer
int maxCoins1(vector<int>& nums) {
    int n = nums.size();
    nums.insert(nums.begin(), 1);
    nums.insert(nums.end(), 1);
    vector<vector<int> > dp(n+2, vector<int>(n+2, 0));
    return DP(1, n, nums, dp);
}

// remember search
int DP(int i, int j, const vector<int> &nums, vector<vector<int>> &dp) {
    if (dp[i][j] > 0) return dp[i][j];
    for (int x = i; x <= j; ++x) {
        int temp = DP(i, x-1, nums, dp) + nums[i-1]*nums[x]*nums[j+1] + DP(x+1, j, nums, dp);
        if (temp > dp[i][j]) dp[i][j] = temp;
    }
    return dp[i][j];
}
