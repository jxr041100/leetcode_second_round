Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.


class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> mymap;
        unordered_map<int,bool> visited;
        int n = nums.size();
        vector<int> result;
        vector<int> freqs;
        
        for(int i= 0;i<n;i++) 
            mymap[nums[i]]++;
            
        for(int i= 0;i<n;i++)
        {
           if(!visited[nums[i]])
           {
            visited[nums[i]] = true;
            int curr_freq = mymap[nums[i]];
            if(freqs.size()==0 || curr_freq<=freqs.back()) 
            {
                freqs.push_back(curr_freq);
                result.push_back(nums[i]);
            }
            else if (curr_freq>freqs.back())
            {
                int left = 0;
                int right = freqs.size()-1;
                //find the searching position
                while(left<right)
                {
                    int mid = left +(right-left)/2;
                    if(freqs[mid]>curr_freq)
                        left = mid+1;
                    else
                        right = mid;
                }
                int search_position = freqs[left]<curr_freq?left:left+1;
                result.insert(result.begin()+search_position,nums[i]);
                freqs.insert(freqs.begin()+search_position,curr_freq);
            }
           }
        }
        vector<int> output(result.begin(),result.begin()+k);
        return output;
    }
};
