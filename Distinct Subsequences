Q:
 Given a string S and a string T, count the number of distinct subsequences of T in S.
A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).
Here is an example:
S = "rabbbit", T = "rabbit"
Return 3. 

class Solution {
public:
    int numDistinct(string s, string t) {
        int m = s.size();
        int n = t.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1));
        //dp[0][0] = 1;
        for(int i =0;i<=m;i++) dp[i][0] = 1; //boundary condition, for empty pattern.
        for(int i = 1;i<=m;i++)
            for(int j = 1;j<=n;j++)
            /*可以这样想，设母串的长度为 i，  
子串的长度为 j，我们要求的就是长度为 j 的字串在长度为 i 的母串中出现的次数，设为 t[i][j]，
若母串的最后一个字符与子串的最后一个字符不同，则长度为 j的子串在长度为 i 的母串中出现的次数
就是母串的前 i - 1 个字符中子串出现的次数，即 t[i][j] = t[i-1][j]，
若母串的最后一个字符与子串的最后一个字符相同，
那么除了前 i - 1 个字符出现字串的次数外，
还要加上子串的前 j - 1 个字符在母串的前 i - 1 个字符中出现的次数
，即 t[i][j] = t[i-1][j] + t[i - 1][j - 1]。  
也可以用二维数组*/
                if(s[i-1]==t[j-1])
                    dp[i][j] = dp[i-1][j]+dp[i-1][j-1];
                else
                    dp[i][j] = dp[i-1][j];
                    
       return dp[m][n];
    }
};
