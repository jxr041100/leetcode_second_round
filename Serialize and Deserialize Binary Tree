Q:
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. 

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree 
    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself. 

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
       string output;
       vector<string> result;
       if(root==NULL) return output;
       queue<TreeNode*>myqueue;
       myqueue.push(root);
       result.push_back(to_string(root->val));
       while(!myqueue.empty())
       {
           TreeNode*front = myqueue.front();
           myqueue.pop();
           if(front->left==NULL) result.push_back("null");
           else 
           {
               result.push_back(to_string(front->left->val));
               myqueue.push(front->left);
           }
           if(front->right ==NULL) result.push_back("null");
           else 
           {
               result.push_back(to_string(front->right->val));;
               myqueue.push(front->right);
           }
       }
       //remove reduandancy about null, or ,
       int j = result.size()-1;
       while(j>=0)
       {
          if(result[j]=="null")j--;
          else break;
       }
        for(int k = 0;k<=j;k++)
        {
          if(k==j) output+=result[k];
          else output+=result[k]+",";
        }
        return output;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
       TreeNode *root = NULL;
       int n = data.size();
       if(n == 0) return root;
       int i =0;
       int start = 0;
       while(i<n && data[i]!=',')i++;//the first number
       string num_str = data.substr(start,i-start);
       root = new TreeNode(atoi(num_str.c_str()));
       i++;//skip the ,
       queue<TreeNode*> myq;
       myq.push(root);
       
       while(i<n)
       {
           TreeNode*front = myq.front();
           myq.pop();
           start = i;
           while(i<n && data[i]!=',')i++;//the following first number
           num_str = data.substr(start,i-start);
           if(num_str=="null") front->left = NULL;
           else front->left = new TreeNode(atoi(num_str.c_str()));
           i++;//skip ,
           
           
           if(i>=n) break;
           
           start = i;
           while(i<n && data[i]!=',')i++;//the following second number
           num_str = data.substr(start,i-start);
           if(num_str=="null") front->right = NULL;
           else front->right = new TreeNode(atoi(num_str.c_str()));
           i++;//skip ,
           
           if(i>=n) break;
           
          if(front->left) myq.push(front->left);
          if(front->right) myq.push(front->right);
       }
       return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
