Q:
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true


class Solution {
public:
    bool isMatch(string s, string p) {
        // solution from Jianfeng Ren, 10/26/2015.
         int m  = s.size();
        int n = p.size();
        vector<vector<bool>> dp(m+1,vector<bool>(n+1));
        dp[0][0] = true;
        dp[0][1] = false;//the first character in p can not be *. 
        //dp[i][0];
        int i,j=1;
        //notes: pay attention for empty string, check pattern which has the *.
        for(int j = 2;j<=n;j++)
             if(p[j-1]=='*') //can match zero or one element.
                dp[0][j] = dp[0][j-1]||dp[0][j-2];
        for(int i = 1;i<=m;i++)
            for(int j=1;j<=n;j++)
            {
                if(s[i-1]==p[j-1] || p[j-1]=='.')
                    dp[i][j] = dp[i-1][j-1];
                else if(j>1 && p[j-1]=='*')
                {
                    dp[i][j] = dp[i][j-1]||dp[i][j-2]||(dp[i-1][j]&&(p[j-2]==s[i-1]||p[j-2]=='.'));
                    
                }
            }
        return dp[m][n];
        //////////////////////////////////////////////////////////
      
        int m = s.size(), n = p.size();
        vector<vector<bool>> dp(m+1, vector<bool>(n+1,false));
        dp[0][0] = true;
        
        for(int i=0; i<=m; i++) {
            for(int j=1; j<=n; j++) {
                if(p[j-1]!='.' && p[j-1]!='*') {
                    if(i>0 && s[i-1]==p[j-1] && dp[i-1][j-1])
                        dp[i][j] = true;
                }
                else if(p[j-1]=='.') {
                    if(i>0 && dp[i-1][j-1])
                        dp[i][j] = true;
                }
                else if(j>1) {  
                    //'*' cannot be the 1st element
                    if(dp[i][j-1] || dp[i][j-2])  // match 0 or 1 preceding element
                        dp[i][j] = true;
                    else if(i>0 && (p[j-2]==s[i-1] || p[j-2]=='.') && dp[i-1][j]) //why???? 10/26/2015
                    // match multiple preceding elements
                        dp[i][j] = true;
                }
            }
        }
        return dp[m][n];
    }
};
