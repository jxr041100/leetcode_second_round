Q:
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0 


class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int low = 0;
        int n = nums.size();
        int high = n-1;
      
          while(low<high)
          {
              int mid = low + (high-low)/2;
              //notes the index 
              if(nums[mid]<target) low = mid+1;  //left sorted,search in right part
              else 
                 high = mid; //right sorted,search in left part
          }
          return nums[low]<target?low+1:low;
    }
};
