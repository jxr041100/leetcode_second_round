Q:
A message containing letters from A-Z is being encoded to numbers using the following mapping: 
'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it. 
For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12). 
The number of ways decoding "12" is 2. 


class Solution {
public:
    int numDecodings(string s) {
        int n = s.size();
        if(n == 0) return 0;
        if(s[0] == '0') return 0;
        vector<int>dp(n+1);
        dp[0] = 1;
        if(isValid(s.substr(0,1))) 
            dp[1] = 1;
        else 
            dp[1] = 0;
        for(int j = 2;j<=n;j++)
        {
            // very good idea to look at two previous numbers.
            if(isValid(s.substr(j-1,1))) dp[j]+= dp[j-1];//preious one letter
            if(isValid(s.substr(j-2,2))) dp[j]+= dp[j-2];//previous two letters
        }
        return dp[n];
    }
    bool isValid(string s)
    {
        if(s[0]=='0') return false;
        //in C++, string can be converted into numbers. 
        int number = std::stoi (s);
        if(number>=1 && number<=26)
            return true;
        else
           return false;
    }
};
