Q:
Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead. 

For example, given the array [2,3,1,2,4,3] and s = 7,
 the subarray [4,3] has the minimal length under the problem constraint




class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int start = 0;
        int end = 0;
        int sum = 0;
        
        //check boundary condition. 
        if(nums.size() == 0) return 0;
        int min_len = INT_MAX;
        while(end<nums.size())
        {
            sum = sum+nums[end];
            if(sum<s) {end++;continue;}
            else
            {
                while(sum>=s)
                {
                    // pay attention to add one.
                    if(end-start+1<min_len)
                       min_len = end-start+1;
                    sum = sum-nums[start];
                    start++;
                }
                end++;
            }
        }
        //pay attention min_len equals INT_MAX.
        return min_len==INT_MAX?0:min_len;
    }
};
