Q:
 Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3. 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
       ListNode dummy(0);
        dummy.next = head;
        ListNode *pre = &dummy;
        ListNode *curr = head;
        if(!curr) return head; //only one element.
        ListNode *next = curr->next;
        while(curr && next)
        {
            if(next->val!=curr->val)
            {
                pre = curr;
                curr = next;
                next = next->next;
            }
            else 
            {
                //duplicate elements
                while(next && curr->val == next->val)
                    next = next->next;
                
                pre = curr; //move forward one step
                curr->next = next;
                curr = next;
                if(next!=NULL)
                    next = next->next;
            }
        }
        return dummy.next;
    }
};
