Q:
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.



class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size()-1;
        if(nums.size() == 0) return -1;
        while(low<=high)
        {
            int mid = low+(high-low)/2;
            if(nums[low]<=nums[high]) //the whole part sorted.            
            {
                if(target>nums[high] || target<nums[low] ) return -1;
                if(target == nums[mid]) return mid;
                else if(nums[mid]<target) low = mid+1;
                else high = mid;
                continue;
            }
            
            if(nums[mid]<nums[high])//right part sorted
            {
                //see whether target is in right part
                if(target>=nums[mid] && target<=nums[high])
                    low = mid;
                else
                    high = mid-1;
            }
            else if(nums[mid]>nums[high]) //left part sorted.
            {
                if(target>=nums[low] && target <=nums[mid])
                    high = mid;
                else
                    low = mid+1;
            }
        }
       return nums[low]==target?low:-1;
    }
};
