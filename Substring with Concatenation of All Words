/***************************************************
You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters. 

For example, given:
s: "barfoothefoobarman"
words: ["foo", "bar"] 

You should return the indices: [0,9].
 (order does not matter). 
*******************************************************/
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int>result;
        int n = s.size();
        int m = words.size();
        if(m==0) return result;
        int k = words[0].size();
        unordered_map<string,int> mytable;
        
        for(int j = 0;j<m;j++) 
            mytable[words[j]]++;
        
        for(int i = 0;i<=n-m*k;i++)
        {
            string sub = s.substr(i,k);
            if(mytable.find(sub) != mytable.end())
            {
                string sub_all = s.substr(i,m*k);
                if(bContainAllOtherWords(sub_all,m,k,words,mytable))
                    result.push_back(i);
            }
        }
        return result;
    }
    
    bool bContainAllOtherWords(string s,int m, int k,vector<string>& words,
                unordered_map<string,int>mytable)
    {
        unordered_map<string,int>tmp_table;
        for(int i = 0;i<m;i++)
        {
            string sub = s.substr(i*k,k);
            if(mytable.find(sub)==mytable.end()) 
                    return false;
            tmp_table[sub]++;
        }
        
        for(int i = 0;i<m;i++)
        {
            if(tmp_table[words[i]] != mytable[words[i]])
              return false;
        }
        return true;
    }
};
