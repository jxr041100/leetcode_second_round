Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0. 

Example 1:


Given ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]
 Return 16
 The two words can be "abcw", "xtfn". 

Example 2:


Given ["a", "ab", "abc", "d", "cd", "bcd", "abcd"]
 Return 4
 The two words can be "ab", "cd". 

Example 3:


Given ["a", "aa", "aaa", "aaaa"]
 Return 0
 No such pair of words.


class Solution {
public:
    int maxProduct(vector<string>& words) {
        int n = words.size();
        vector<int>bitmask(n);
        for(int j = 0;j<words.size();j++)
        {
           int bit = 0;
           for(int i = 0;i<words[j].size();i++)
                bit |= 1<<words[j][i]-'a';
           bitmask[j] = bit;
        }
        int max_length = -1;
        int length;
        for(int i = 0; i<words.size();i++)
            for(int j = i+1;j<words.size();j++)
            {
                if((bitmask[i] & bitmask[j])==0)
                {
                    length = (words[i].size())*(words[j].size());
                    if(length>max_length) max_length = length;
                }
            }
        
        return max_length==-1?0:max_length;
    }
};
