Q:
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as a binary tree 
in which the depth of the two subtrees of every node never differ by more than 1. 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(root==NULL) return true;
        int left =  height(root->left);
        int right = height(root->right);
        // 如果子树高度差大于1，则不平衡  
        if(abs(left-right)>1) 
            return false;
        //递归检查左子树和右子树的平衡性, note: two recursive functions being used here  
        return isBalanced(root->left) && isBalanced(root->right);
    }
    
    // 帮助方法，返回树的高度  
    int height(TreeNode*root)
    {
        if(root == NULL) return 0;
        int left =  height(root->left);
        int right = height(root->right);
        return max(left,right)+1;
    }
};
