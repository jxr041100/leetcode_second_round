 Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6

The flattened tree should look like:

   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6

click to show hints.
Hints:

If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        stack<TreeNode* >myS;
        TreeNode dummy(0);
        TreeNode *p = &dummy;
        if(root==NULL) return;
        myS.push(root);
        while(!myS.empty())
        {
            TreeNode *curr = myS.top();
            myS.pop();
            p->right = curr;
            p = p->right;
            if(curr->right) {myS.push(curr->right);curr->right=NULL;}
            if(curr->left) {myS.push(curr->left);curr->left=NULL;}
        }
        root = dummy.right;
    }
};
