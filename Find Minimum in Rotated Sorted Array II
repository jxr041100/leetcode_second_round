Q:

Follow up for "Find Minimum in Rotated Sorted Array":
 What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.



Subscribe to see which companies asked this question


class Solution {
public:
    int findMin(vector<int>& nums) {
      int low = 0;
      int n = nums.size();
      int high = n-1;
      
      if(n==0) return 0;
      else if(n==1) return nums[0];
      else if(n==2) return min(nums[0],nums[1]);
      
      while(low<high)
      {
          int mid = low + (high-low)/2;
          if(nums[low]<nums[high]) return nums[low];
          
          //notes the index 
          if(nums[mid]<nums[low]) high = mid;  //[mid,end]right sorted
          else if(nums[mid]>nums[low]) low = mid; //left sorted
          else low++;
      }
      return nums[low];
    }
};
