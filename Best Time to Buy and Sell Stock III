Q:
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions




class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int n = prices.size();
       if(n<=1) return 0;
       
       
       vector<int>left(n);
       vector<int>right(n);
       
       //Notes 12/22/2015, initialize the min prices as the first element
       int min_price = prices[0];
       for(int i = 1;i<n;i++)
       {
          if(prices[i]<min_price)
              min_price = prices[i];
           left[i] = max(prices[i]-min_price,left[i-1]);
       }
       
       //Notes 12/22/2015, initialize the max prices as the last element
       int max_price = prices[n-1];
       for(int i = n-2;i>=0;i--)
       {
          if(prices[i]>max_price)
              max_price = prices[i];
           right[i] = max(max_price-prices[i],right[i+1]);
       }
       
       int res = INT_MIN;
       for(int k = 0;k<n;k++)
          res = max(res, left[k]+right[k]);
         
       return res;
    }
};
