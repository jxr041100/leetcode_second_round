Q:
Given a collection of numbers, return all possible permutations. 

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1]. 


class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        dfs(nums,0,result);
        return result;
    }
    void dfs(vector<int>& nums,int m, vector<vector<int>>&result)
    {
        if(m == nums.size())
            result.push_back(nums);
        
        for(int i = m;i<nums.size();i++)
        {
            swap(nums[i],nums[m]);
            dfs(nums,m+1,result);//notes: why m not i, sometimes, it pick up m, sometimes it pick up i.
            swap(nums[m],nums[i]);
        }
    }
};

solution II:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> tmp;
        vector<int> visited(nums.size(),0);
        sort(nums.begin(),nums.end());
        dfs(nums,0,visited,tmp,result);
        return result;
    }
    void dfs(vector<int>& nums,int m, vector<int> &visited,vector<int> &tmp,vector<vector<int>>&result)
    {
        if(m == nums.size())
        {
            result.push_back(tmp);
            return;
        }
        for(int i = 0;i<nums.size();i++)
        {
            if(visited[i]==0)
            {
                visited[i]=1;
                tmp.push_back(nums[i]);
                dfs(nums,m+1,visited,tmp,result);//why m or not i. 
                tmp.pop_back();
                visited[i]=0;
            }
        }
    }
};
