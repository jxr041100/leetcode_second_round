Q:
Implement wildcard pattern matching with support for '?' and '*'.
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

solution 1:dp aglorithm
class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.size();
        int n = p.size();
        if(m == 0  && n ==0) return true;
        
        vector<vector<bool>> dp(n+1,vector<bool>(m+1));
        dp[0][0] = true;
        //dp[j][i] means matching status between str.Substring(0, i) and pattern.Substring(0, j)
        int j  = 0;
        while(j<n && p[j++]=='*') dp[j][0] = true;
        
        for(int j = 1;j<=n;j++)
            for(int i = 1;i<=m;i++)
            {
                if(p[j-1]==s[i-1] || p[j-1]=='?')
                    dp[j][i] = dp[j-1][i-1];
                else if(p[j-1]=='*')
                    //note: dp[j][i-1] assuming matching from i to m
                    //note: dp[j-1][i] previous matching result.
                    dp[j][i] = dp[j][i-1]||dp[j-1][i];
                else
                    dp[j][i] = false;
            }

        return dp[n][m];
    }
};


class Solution {
public:
    bool isMatch(string s, string p) {
        int index = -1;
        int mark = 0;
        int j = 0;
        int i = 0;
        while(i<s.size())
        {
            if(s[i] == p[j] || p[j]=='?')//skip to next element
            {
                i++;
                j++;
            }
            else if (p[j] =='*')
            {
               index = j;
               mark = i;
               j++;
            }
            // this is very important. 
            else if(index!=-1)
            {
                j = index+1;
                i = ++mark;
            }
            else 
               return false;
        }
        while(j<p.size() && p[j]=='*') j++;
        return j==p.size()?true:false;
    }
};



