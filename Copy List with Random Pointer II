Q:
 A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.



/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
       if(head == NULL) return NULL;
       unordered_map<RandomListNode *,RandomListNode *>mymap;
       //queue<RandomListNode *>myqueue;
       RandomListNode dummy(0);
       RandomListNode *copy_node = &dummy;
       
       copy_node->next = new RandomListNode(head->label);
       copy_node = copy_node->next;
       mymap[head] = copy_node;
       
       while(head)
       {
           //deep copy the next node
           if(head->next!= NULL)
           {
               if(mymap[head->next])
                copy_node->next = mymap[head->next];
               else
               {
                   RandomListNode *next_node = new RandomListNode(head->next->label);
                   copy_node->next = next_node;
                   mymap[head->next] = next_node;
               }
           }
           
           //deep copy the random node.
          if(head->random!= NULL)
           {
               if(mymap[head->random])
                copy_node->random = mymap[head->random];
               else
               {
                   RandomListNode *random_node =
                        new RandomListNode(head->random->label);
                   copy_node->random = random_node;
                   mymap[head->random] = random_node;
               }
           }
           head= head->next;
           copy_node = copy_node->next;
       }
       
       return dummy.next;
    }
};
