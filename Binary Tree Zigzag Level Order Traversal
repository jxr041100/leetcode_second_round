Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
 Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7



return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]



confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if(root==NULL) return result;
        queue<TreeNode*> myq;
        myq.push(root);
        int level = 0;
        while(!myq.empty())
        {
            int n = myq.size();
            vector<int> tmp;
            for(int i = 0;i<n;i++)
            {
                TreeNode *top = myq.front();
                myq.pop();
                tmp.push_back(top->val);
                if(top->left) myq.push(top->left);
                if(top->right) myq.push(top->right);
            }
            if(level%2==1) 
              reverse(tmp.begin(),tmp.end());
            result.push_back(tmp);
            level++;
        }
        return result;
    }
};
