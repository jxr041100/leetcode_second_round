Q:
Find the contiguous subarray within an array (containing at least one number) which has the largest product.
For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6. 


class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        if(n == 0 ) return 0;
        if(n == 1)  return nums[0];
        vector<int>dpmax(n+1,INT_MIN);
        vector<int>dpmin(n+1,INT_MAX);
        dpmax[0] = 1;
        dpmin[0] = 1;
        int max_product = INT_MIN;
        for(int j = 1;j<=n;j++)
        {
            dpmax[j] = max(max(dpmax[j-1]*nums[j-1],dpmin[j-1]*nums[j-1]),nums[j-1]);
            dpmin[j] = min(min(dpmax[j-1]*nums[j-1],dpmin[j-1]*nums[j-1]),nums[j-1]);
            max_product = max(max_product,dpmax[j]);
        }
        return max_product;
    }
};
