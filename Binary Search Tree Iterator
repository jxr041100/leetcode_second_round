Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree. 



/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
    
public:
    
    stack<TreeNode*>mystack;
    BSTIterator(TreeNode *root) {
        while(root)
        {
            mystack.push(root);
            root = root->left;
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return mystack.size()>0?true:false;
    }

    /** @return the next smallest number */
    int next() {
        TreeNode *top = mystack.top();
        mystack.pop();
        int val = top->val;
        if(top->right)
        {
            TreeNode *tmp = top->right;
            while(tmp)
            {
                 mystack.push(tmp);
                tmp = tmp->left;
            }
        }
        return val;
    }
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
