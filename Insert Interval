Q:



/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> result;
        vector<Interval>::iterator it;
        bool bAdded = false;
        if(intervals.size()==0) {result.push_back(newInterval);return result;}
        for(it = intervals.begin();it!=intervals.end();it++)
        {
            if(newInterval.end<it->start)
            {
                result.push_back(newInterval);
                newInterval = *it;//Note: this line is required.
            }
            else if(newInterval.start>it->end) result.push_back(*it);
            else
            {
                newInterval.start = min(it->start,newInterval.start);
                newInterval.end   = max(it->end,newInterval.end);
            }
        }
        result.push_back(newInterval);
        return result;
    }
};
