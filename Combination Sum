/***********************************************************************
 Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:

    All numbers (including target) will be positive integers.
    Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
    The solution set must not contain duplicate combinations.

For example, given candidate set 2,3,6,7 and target 7,
A solution set is:
[7]
[2, 2, 3]
**********************************************************************/

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int>ans;
        vector<vector<int>> output;
        sort(candidates.begin(),candidates.end());
        dfs(candidates,0,target,ans,output);
        return output;
    }
private:
    void dfs(vector<int>& candidates, int start,int target,vector<int>&ans,
    vector<vector<int>>&result)
    {
        if(target<0) return;
        
        if(target==0)
        {
            sort(ans.begin(),ans.end());
            result.push_back(ans);
            return;
        }
      
        for(int j = start;j<candidates.size();j++)
        {
            //skip duplicates.
            if(j>start && candidates[j]==candidates[j-1]) continue; 
            ans.push_back(candidates[j]);
            //pay attention the index is j, not j+1, due to duplicated numbers.
            dfs(candidates,j,target-candidates[j],ans,result);
            ans.pop_back();
        }
    }
};
