Q:
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note:
•Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
•The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)





class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> result;
        if(n<3) return result;
        int left,right;
        sort(nums.begin(),nums.end());
        for(int i = 0;i<n;i++)
        {
            left = i+1;
            right = n-1;
            while(left<right)
            {
                int sum = nums[i]+nums[left] + nums[right];
                //move the pointers.
                if(sum == 0)
                {
                    vector<int> ans{nums[i],nums[left],nums[right]};
                    result.push_back(ans);
                    //NOTES: 11/10/2015, avoid duplicates.
                    while(left++<n && nums[left] == nums[left-1]){};
                    while(right-->=0 && nums[right] == nums[right+1]){};
                }
                else if(sum >0)
                    right--;
                else 
                    left++;
            }
            //NOTES::check the next element to avoid duplicates
            while(i+1<n && nums[i+1]==nums[i]){i++;};
        }
        return result;
    }
};
