Q:
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array. 

For example,
 Given nums = [0, 1, 3] return 2. 

Note:
 Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity? 


class Solution {
public:
    int missingNumber(vector<int>& nums) {
       int n = nums.size();
       int expect_sum = n*(n+1)/2;
       int sum = 0;
       for(int i = 0;i<n;i++) sum = sum+nums[i];
       
       return expect_sum-sum;
    }
};

/*****************soluiton from online***************************************/
int missingNumber2(vector<int>& nums) {
    int res = 0;
    for(auto& num: nums)
        res ^= num;
    for (unsigned int i=0; i<=nums.size(); i++)
        res ^= i;
    return res;
}

int missingNumber(vector<int>& nums) {
    unordered_set<int> mySet;
    for (auto& num: nums)
        mySet.insert(num);
    for (unsigned int i=0; i<=nums.size(); i++) 
        if (mySet.find(i) == mySet.end())
            return i;
}
